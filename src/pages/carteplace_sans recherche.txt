import { useState, useEffect, useContext } from "react";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import axios from "axios";
import L from 'leaflet';
import TraceItineraire from "./TraceItineraire";
import { getCityCoordinates } from "../utils/geocode";
import { UserContext } from "../context/UserContext";
import PropTypes from 'prop-types';

const CartePlaces = ({ apiKey }) => {
  const userData = useContext(UserContext);
  const [marqueurs, setMarqueurs] = useState([]);
  const [selectedMarker, setSelectedMarker] = useState(null);
  const [adresseDepart, setAdresseDepart] = useState("");
  const [coordDepart, setCoordDepart] = useState(null);
  const [routeData, setRouteData] = useState(null);

  // Set departure address from user data if available
  useEffect(() => {
    if (userData && userData.address) {
      setAdresseDepart(`${userData.address}  ${userData.postal_code} le Mans`);
      console.log(adresseDepart);
    } else {
      console.warn("User data or user address is not available.");
    }
  }, [userData, adresseDepart]);

  // Fetch coordinates for the departure address
  useEffect(() => {
    if (adresseDepart) {
      const fetchCoordDepart = async () => {
        try {
          const { lat, lon } = await getCityCoordinates(adresseDepart);
          setCoordDepart([lat, lon]);
        } catch (error) {
          console.error("Erreur lors de la récupération des coordonnées de départ", error);
        }
      };
      fetchCoordDepart();
    }
  }, [adresseDepart]);

  // Fetch places and their coordinates
  useEffect(() => {
    const fetchLieux = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:8000/api/places");
        const lieuxData = response.data.places || [];

        const marqueursAvecCoordonnees = await Promise.all(
          lieuxData.map(async (lieu) => {
            try {
              if (lieu.address) {
                const { lat, lon } = await getCityCoordinates(lieu.address);
                return {
                  position: [lat, lon],
                  popup: `${lieu.title} - ${lieu.price}€`,
                  photo: lieu.photo,
                  address: lieu.address,
                  id: lieu.id,
                  title: lieu.title,
                  type: lieu.type,
                };
              }
              return null;
            } catch (error) {
              console.error(`Erreur pour ${lieu.address}: ${error.message}`);
              return null;
            }
          })
        );

        setMarqueurs(marqueursAvecCoordonnees.filter((marqueur) => marqueur !== null));
      } catch (error) {
        console.error("Erreur lors de la récupération des lieux", error);
      }
    };

    fetchLieux();
  }, []);

  // Fetch route data when coordinates and selected marker are available
  useEffect(() => {
    if (coordDepart && selectedMarker) {
      const fetchRoute = async () => {
        try {
          const response = await axios.get(
            `https://api.openrouteservice.org/v2/directions/driving-car`,
            {
              params: {
                api_key: apiKey,
                start: `${coordDepart[1]},${coordDepart[0]}`,
                end: `${selectedMarker.position[1]},${selectedMarker.position[0]}`,
              },
            }
          );

          setRouteData(response.data);
        } catch (error) {
          console.error("Erreur lors de la récupération de l'itinéraire:", error);
        }
      };

      fetchRoute();
    }
  }, [coordDepart, selectedMarker, apiKey]);

  const handleMarkerClick = (marqueur) => {
    setSelectedMarker(marqueur);
  };

  return (
    <div style={{ position: "relative", height: "100%", width: "100%" }} className="z-0">
      <div className="flex flex-row">
        <div className="info-panel w-1/3 h-screen bg-white border-r border-gray-300 p-4 overflow-y-auto">
          {routeData?.features[0]?.properties ? (
            <div>
              <p>
                <strong><i className="fas fa-map-marker-alt"></i> Distance:</strong>{" "}
                {(routeData.features[0].properties.summary.distance / 1000).toFixed(2)} km
              </p>
              <p>
                <i className="fas fa-bicycle"></i><strong> Durée:</strong> {(routeData.features[0].properties.summary.duration / 60).toFixed(2)} minutes
              </p>
            </div>
          ) : (
            <p>Aucune information disponible</p>
          )}
        </div>

        <MapContainer
          center={coordDepart || [48.00622, 0.19501]} // Default to center if no coordinates
          zoom={12}
          style={{ height: "100vh", width: "100%" }}
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />

          {marqueurs.map((marqueur) => (
            <Marker
              key={marqueur.id}
              position={marqueur.position}
              icon={
                new L.divIcon({
                  html: `<i class="fas fa-${marqueur.type} text-2xl text-${["red", "gray", "yellow", "green", "blue", "indigo"][Math.floor(Math.random() * 6)]}-700 dark:text-${["red", "gray", "yellow", "green", "blue", "indigo"][Math.floor(Math.random() * 6)]}-700"></i>`,
                  iconSize: [40, 40], // Adjust size for visibility
                  iconAnchor: [20, 40], // Anchor for the icon
                  popupAnchor: [0, -40], // Position of the popup
                })
              }
              eventHandlers={{
                click: () => handleMarkerClick(marqueur),
              }}
            >
              <Popup className="p-2">
                <div className="text-center">
                  <a href={`/fiche-place/${marqueur.id}`} className="text-md font-bold">
                    {marqueur.title}
                    <br />
                    <div className="flex items-center justify-center mt-3">
                      <img
                        className="h-10 object-cover rounded-lg animate-fadeIn"
                        src={`http://127.0.0.1:8000${marqueur.photo}`}
                        alt={marqueur.title}
                      />
                    </div>
                    <p className="mt-2 text-md font-semibold">
                      <i className="fas fa-map-marker-alt text-red-800 dark:text-red-400"></i>{" "}
                      {marqueur.address}
                    </p>
                  </a>
                </div>
              </Popup>
            </Marker>
          ))}

          {coordDepart && selectedMarker && <TraceItineraire routeData={routeData} />}
        </MapContainer>
      </div>
    </div>
  );
};

CartePlaces.propTypes = {
  apiKey: PropTypes.string.isRequired,
};

export default CartePlaces;
