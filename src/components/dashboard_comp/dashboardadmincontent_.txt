import React, { useState, useEffect, useContext } from "react";
import PropTypes from "prop-types";
import { AuthContext } from "../../context/AuthContext";
import { UserContext } from "../../context/UserContext";
import SidebarAdmin from "./SidebarAdmin";
import Header from "./pageadmin/Header";
import Signalement from "./pageadmin/Signalement";
import ListePlacesAdmin from "./pageadmin/ListePlacesAdmin";
import ListeCategories from "./pageadmin/ListeCategories";
import ListeReservationsAdmin from "./pageadmin/ListeReservationsAdmin";
import ListEvents from "./pageadmin/ListEvents";
import AdminDashboard from "./pageadmin/AdminDashboard";
import UtilisateursAdmin from "../auth/UtilisateursAdmin";
import ProductList from "./pageadmin/ProductList";
import axios from "axios";

const QuickActions = () => (
  <>
    <div
      id="quick-actions"
      className="mt-8 bg-white rounded-lg shadow-md p-6 animate-slideIn pt-8 w-screen md:w-2/4 lg:w-3/4 xl:w-3/4"
    >
      <h2 className="text-2xl font-bold mb-4 dark:text-gray-800">Actions rapides</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 ">
        <a
          href="/messages-management"
          className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-envelope fa-fw pr-1"></i> Voir mes messages
        </a>
        <a
          href="/deposer_categorie"
          className="bg-orange-500 hover:bg-orange-400 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-plus-circle fa-fw pr-1"></i> Nouvelle catégorie
        </a>
        <a
          href="/deposer_place"
          className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-plus-circle fa-fw pr-1"></i> Nouvelle place
        </a>
        <a
          href="/reservations-new"
          className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-plus-circle fa-fw pr-1"></i> Nouveau lieu de réservation
        </a>
        <a
          href="/profil-user-update"
          className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-cog fa-fw pr-1"></i> Paramètres
        </a>
        <a
          href="/"
          className="bg-sky-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 text-center"
        >
          <i className="fa fa-sign-out  "></i> Page d&#39;accueil
        </a>
      </div>
    </div>
  </>
);

const DashboardCard = ({ title, value, icon, color }) => (
  <div className={`bg-white rounded-lg shadow-md p-4 ${color} animate-slideIn`}>
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm font-medium text-gray-500 uppercase">{title}</p>
        <p className="mt-2 text-lg font-semibold">{value}</p>
      </div>
      <div
        className={`p-2 rounded-full ${color
          .replace("text-", "bg-")
          .replace("600", "100")}`}
      >
        <i className={`${icon} ${color}`}></i>
      </div>
    </div>
  </div>
);

DashboardCard.propTypes = {
  title: PropTypes.string.isRequired,
  icon: PropTypes.string.isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  color: PropTypes.string.isRequired,
};

const DashboardAdminContent = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [countPlaces, setCountPlaces] = useState(0);
  const [countMessages, setCountMessages] = useState(0);
  const [favoriteCount, setFavoriteCount] = useState(0);
  const [reportCount, setReportCount] = useState(0);
  const [currentSection, setCurrentSection] = useState("AdminDashboard");
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const { token } = useContext(AuthContext);
  const user = useContext(UserContext);

  const toggleSidebarFunction = () => setSidebarOpen(!sidebarOpen);

  useEffect(() => {
    const fetchPlaceCount = async () => {
      if (!user?.id) return;

      try {
        const response = await axios.get("http://127.0.0.1:8000/api/places", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
            Accept: "application/json",
          },
        });

        setCountPlaces(response.data.places.length);
      } catch (error) {
        console.error("Erreur lors de la récupération des places", error);
      }
    };

    fetchPlaceCount();
  }, [token, user?.id]);

  useEffect(() => {
    const fetchMessagesCount = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:8000/api/messages", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
            Accept: "application/json",
          },
        });

        setCountMessages(response.data.length);

        const userFavoriteMessages = response.data.filter(
          (message) => message.is_favorite === 1
        );

        setFavoriteCount(userFavoriteMessages.length);

        const userReportedMessages = response.data.filter(
          (message) => message.is_report === 1
        );

        setReportCount(userReportedMessages.length);
      } catch (error) {
        console.error("Erreur lors de la récupération des messages", error);
        if (error.response) {
          console.error("Erreur:", error.response.data);
        }
      }
    };

    fetchMessagesCount();
  }, [token]);

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const renderContent = () => {
    switch (currentSection) {
      case "admindashboard":
        return <AdminDashboard />;
      case "signalements":
        return <Signalement />;
      case "adminplaces":
        return <ListePlacesAdmin />;
      case "categories":
        return <ListeCategories />;
      case "reservations":
        return <ListeReservationsAdmin />;
      case "adminevents":
        return <ListEvents />;
      case "adminusers":
        return <UtilisateursAdmin />;
      case "ProductList":
        return <ProductList />;
      default:
        return <AdminDashboard />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <React.Fragment>
        {/* Sidebar */}
        <SidebarAdmin
          isOpen={sidebarOpen}
          toggleSidebar={toggleSidebar}
          setCurrentSection={setCurrentSection}
          currentSection={currentSection}
        />

        {/* Main Content */}
        <div
          className={`flex-1 flex flex-col overflow-hidden h-auto ${
            isSidebarOpen ? "ml-64" : "ml-20"
          }`}
        >
          {/* Header */}
          <Header toggleSidebar={toggleSidebarFunction} />

          {/* Main Dashboard Content */}
          <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100 dark:bg-black p-4 pl-10">
            {/* Quick Actions */}
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 mx-4">
              <DashboardCard
                title="Les places"
                icon="fa fa-bolt"
                value={countPlaces}
                color="text-blue-600"
              />
              <DashboardCard
                title="Messages"
                icon="fa fa-envelope"
                value={countMessages}
                color="text-green-600"
              />
              <DashboardCard
                title="Favoris"
                icon="fa fa-star"
                value={favoriteCount}
                color="text-yellow-500"
              />
              <DashboardCard
                title="Signalements"
                icon="fa fa-flag"
                value={reportCount}
                color="text-red-600"
              />
            </div>

            {/* Quick Actions Section */}
            <QuickActions />

            <div className="grid gap-6 dark:text-white">
              <div className="card p-6">
                <h2 className="text-lg font-semibold mb-4">Recent Activities</h2>
                <ul className="space-y-4">
                  {[
                    { color: "blue", text: 'New place added: "Doggy Daycare"' },
                    { color: "green", text: 'User "JohnDoe" updated their profile' },
                    { color: "red", text: 'Report: "Noise complaint in Park"' },
                  ].map((activity, index) => (
                    <li key={index} className="flex items-center space-x-4">
                      <div
                        className={`w-4 h-4 bg-${activity.color}-500 rounded-full`}
                      ></div>
                      <span>{activity.text}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Section Rendering */}
            <section>{renderContent()}</section>
          </main>
        </div>
      </React.Fragment>
    </div>
  );
};

export default DashboardAdminContent;
